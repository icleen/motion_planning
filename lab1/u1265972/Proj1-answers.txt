Iain Lee

----------------------- 1 -----------------------------
1.1
Path:
[(4, 0, 0), (4, 1, 0), (4, 2, 0), (4, 3, 0), (4, 4, 0), (3, 4, 0), (2, 4, 0), (1, 4, 0), (1, 3, 0), (0, 3, 0), (0, 4, 0)]
Actions:
['r', 'r', 'r', 'r', 'u', 'u', 'u', 'l', 'u', 'r']
Visited:
[(4, 0, 0), (4, 1, 0), (4, 2, 0), (4, 3, 0), (4, 4, 0), (3, 4, 0), (3, 3, 0), (2, 4, 0), (1, 4, 0), (1, 3, 0), (0, 3, 0), (0, 4, 0)]

Analysis: The path it took is not the shortest.  This is because the algorithm chose to prioritize looking at the left action over the up action and therefore found the goal through that action and quit instead of finding the optimal path.

pic: images/result_dfs_map0.png

1.2
Path:
[(10, 1, 0), (10, 2, 0), (10, 3, 0), (11, 3, 0), (11, 4, 0), (11, 5, 0), (11, 6, 0), (11, 7, 0), (11, 8, 0), (11, 9, 0), (11, 10, 0), (11, 11, 0), (11, 12, 0), (11, 13, 0), (11, 14, 0), (11, 15, 0), (12, 15, 0), (12, 16, 0), (12, 17, 0), (12, 18, 0), (12, 19, 0), (12, 20, 0), (13, 20, 0), (13, 21, 0), (13, 22, 0), (13, 23, 0), (13, 24, 0), (13, 25, 0), (13, 26, 0), (13, 27, 0), (14, 27, 0), (14, 26, 0), (14, 25, 0), (14, 24, 0), (14, 23, 0), (14, 22, 0), (14, 21, 0), (14, 20, 0), (14, 19, 0), (14, 18, 0), (14, 17, 0), (14, 16, 0), (14, 15, 0), (14, 14, 0), (14, 13, 0), (14, 12, 0), (14, 11, 0), (14, 10, 0), (14, 9, 0), (14, 8, 0), (14, 7, 0), (14, 6, 0), (14, 5, 0), (14, 4, 0), (14, 3, 0), (14, 2, 0), (14, 1, 0), (14, 0, 0), (15, 0, 0), (15, 1, 0), (15, 2, 0), (15, 3, 0), (15, 4, 0), (15, 5, 0), (15, 6, 0), (15, 7, 0), (15, 8, 0), (15, 9, 0), (15, 10, 0), (15, 11, 0), (15, 12, 0), (15, 13, 0), (15, 14, 0), (15, 15, 0), (15, 16, 0), (15, 17, 0), (15, 18, 0), (15, 19, 0), (15, 20, 0), (15, 21, 0), (15, 22, 0), (15, 23, 0), (15, 24, 0), (15, 25, 0), (15, 26, 0), (15, 27, 0), (15, 28, 0), (15, 29, 0), (15, 30, 0), (15, 31, 0), (14, 31, 0), (14, 30, 0), (14, 29, 0), (13, 29, 0), (13, 30, 0), (13, 31, 0), (12, 31, 0), (12, 30, 0), (12, 29, 0), (11, 29, 0), (11, 30, 0), (11, 31, 0), (10, 31, 0), (10, 30, 0), (10, 29, 0), (10, 28, 0), (10, 27, 0), (10, 26, 0), (10, 25, 0), (10, 24, 0), (10, 23, 0), (10, 22, 0), (10, 21, 0), (10, 20, 0), (10, 19, 0), (10, 18, 0), (10, 17, 0), (10, 16, 0), (10, 15, 0), (9, 15, 0), (9, 16, 0), (9, 17, 0), (9, 18, 0), (9, 19, 0), (9, 20, 0), (9, 21, 0), (9, 22, 0), (9, 23, 0), (9, 24, 0), (9, 25, 0), (9, 26, 0), (9, 27, 0), (9, 28, 0), (9, 29, 0), (9, 30, 0), (9, 31, 0), (8, 31, 0), (8, 30, 0), (8, 29, 0), (7, 29, 0), (7, 30, 0), (7, 31, 0), (6, 31, 0), (6, 30, 0), (6, 29, 0), (6, 28, 0), (6, 27, 0), (6, 26, 0), (6, 25, 0), (6, 24, 0), (7, 24, 0), (7, 25, 0), (7, 26, 0), (7, 27, 0), (8, 27, 0), (8, 26, 0), (8, 25, 0), (8, 24, 0), (8, 23, 0), (8, 22, 0), (8, 21, 0), (8, 20, 0), (8, 19, 0), (8, 18, 0), (8, 17, 0), (8, 16, 0), (8, 15, 0), (7, 15, 0), (7, 16, 0), (7, 17, 0), (7, 18, 0), (7, 19, 0), (7, 20, 0), (6, 20, 0), (6, 19, 0), (6, 18, 0), (6, 17, 0), (6, 16, 0), (6, 15, 0), (6, 14, 0), (6, 13, 0), (6, 12, 0), (5, 12, 0), (5, 13, 0), (5, 14, 0), (5, 15, 0), (5, 16, 0), (5, 17, 0), (5, 18, 0), (5, 19, 0), (5, 20, 0), (4, 20, 0), (4, 19, 0), (4, 18, 0), (4, 17, 0), (4, 16, 0), (4, 15, 0), (4, 14, 0), (4, 13, 0), (4, 12, 0), (3, 12, 0), (3, 11, 0), (3, 10, 0), (4, 10, 0)]

Actions:
['r', 'r', 'd', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'd', 'r', 'r', 'r', 'r', 'r', 'd', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'd', 'l', 'l', 'l', 'l', 'l', 'l', 'l', 'l', 'l', 'l', 'l', 'l', 'l', 'l', 'l', 'l', 'l', 'l', 'l', 'l', 'l', 'l', 'l', 'l', 'l', 'l', 'l', 'd', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'u', 'l', 'l', 'u', 'r', 'r', 'u', 'l', 'l', 'u', 'r', 'r', 'u', 'l', 'l', 'l', 'l', 'l', 'l', 'l', 'l', 'l', 'l', 'l', 'l', 'l', 'l', 'l', 'l', 'u', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'u', 'l', 'l', 'u', 'r', 'r', 'u', 'l', 'l', 'l', 'l', 'l', 'l', 'l', 'd', 'r', 'r', 'r', 'd', 'l', 'l', 'l', 'l', 'l', 'l', 'l', 'l', 'l', 'l', 'l', 'l', 'u', 'r', 'r', 'r', 'r', 'r', 'u', 'l', 'l', 'l', 'l', 'l', 'l', 'l', 'l', 'u', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'u', 'l', 'l', 'l', 'l', 'l', 'l', 'l', 'l', 'u', 'l', 'l', 'd']

Visited:
[(10, 1, 0), (10, 2, 0), (10, 3, 0), (11, 3, 0), (11, 4, 0), (11, 5, 0), (11, 6, 0), (11, 7, 0), (11, 8, 0), (11, 9, 0), (11, 10, 0), (11, 11, 0), (11, 12, 0), (11, 13, 0), (11, 14, 0), (11, 15, 0), (12, 15, 0), (12, 16, 0), (12, 17, 0), (12, 18, 0), (12, 19, 0), (12, 20, 0), (13, 20, 0), (13, 21, 0), (13, 22, 0), (13, 23, 0), (13, 24, 0), (13, 25, 0), (13, 26, 0), (13, 27, 0), (14, 27, 0), (14, 26, 0), (14, 25, 0), (14, 24, 0), (14, 23, 0), (14, 22, 0), (14, 21, 0), (14, 20, 0), (14, 19, 0), (14, 18, 0), (14, 17, 0), (14, 16, 0), (14, 15, 0), (14, 14, 0), (14, 13, 0), (14, 12, 0), (14, 11, 0), (14, 10, 0), (14, 9, 0), (14, 8, 0), (14, 7, 0), (14, 6, 0), (14, 5, 0), (14, 4, 0), (14, 3, 0), (14, 2, 0), (14, 1, 0), (14, 0, 0), (15, 0, 0), (15, 1, 0), (15, 2, 0), (15, 3, 0), (15, 4, 0), (15, 5, 0), (15, 6, 0), (15, 7, 0), (15, 8, 0), (15, 9, 0), (15, 10, 0), (15, 11, 0), (15, 12, 0), (15, 13, 0), (15, 14, 0), (15, 15, 0), (15, 16, 0), (15, 17, 0), (15, 18, 0), (15, 19, 0), (15, 20, 0), (15, 21, 0), (15, 22, 0), (15, 23, 0), (15, 24, 0), (15, 25, 0), (15, 26, 0), (15, 27, 0), (15, 28, 0), (15, 29, 0), (15, 30, 0), (15, 31, 0), (14, 31, 0), (14, 30, 0), (14, 29, 0), (13, 29, 0), (13, 30, 0), (13, 31, 0), (12, 31, 0), (12, 30, 0), (12, 29, 0), (11, 29, 0), (11, 30, 0), (11, 31, 0), (10, 31, 0), (10, 30, 0), (10, 29, 0), (10, 28, 0), (10, 27, 0), (10, 26, 0), (10, 25, 0), (10, 24, 0), (10, 23, 0), (10, 22, 0), (10, 21, 0), (10, 20, 0), (10, 19, 0), (10, 18, 0), (10, 17, 0), (10, 16, 0), (10, 15, 0), (9, 15, 0), (9, 16, 0), (9, 17, 0), (9, 18, 0), (9, 19, 0), (9, 20, 0), (9, 21, 0), (9, 22, 0), (9, 23, 0), (9, 24, 0), (9, 25, 0), (9, 26, 0), (9, 27, 0), (9, 28, 0), (9, 29, 0), (9, 30, 0), (9, 31, 0), (8, 31, 0), (8, 30, 0), (8, 29, 0), (7, 29, 0), (7, 30, 0), (7, 31, 0), (6, 31, 0), (6, 30, 0), (6, 29, 0), (6, 28, 0), (6, 27, 0), (6, 26, 0), (6, 25, 0), (6, 24, 0), (7, 24, 0), (7, 25, 0), (7, 26, 0), (7, 27, 0), (7, 28, 0), (8, 27, 0), (8, 26, 0), (8, 25, 0), (8, 24, 0), (8, 23, 0), (8, 22, 0), (8, 21, 0), (8, 20, 0), (8, 19, 0), (8, 18, 0), (8, 17, 0), (8, 16, 0), (8, 15, 0), (7, 15, 0), (7, 16, 0), (7, 17, 0), (7, 18, 0), (7, 19, 0), (7, 20, 0), (7, 21, 0), (7, 22, 0), (7, 23, 0), (6, 20, 0), (6, 19, 0), (6, 18, 0), (6, 17, 0), (6, 16, 0), (6, 15, 0), (6, 14, 0), (6, 13, 0), (6, 12, 0), (7, 12, 0), (7, 13, 0), (8, 13, 0), (8, 12, 0), (9, 12, 0), (9, 13, 0), (10, 13, 0), (10, 12, 0), (5, 12, 0), (5, 13, 0), (5, 14, 0), (5, 15, 0), (5, 16, 0), (5, 17, 0), (5, 18, 0), (5, 19, 0), (5, 20, 0), (4, 20, 0), (4, 19, 0), (4, 18, 0), (4, 17, 0), (4, 16, 0), (4, 15, 0), (4, 14, 0), (4, 13, 0), (4, 12, 0), (3, 12, 0), (3, 13, 0), (3, 14, 0), (3, 15, 0), (3, 16, 0), (3, 17, 0), (3, 18, 0), (3, 19, 0), (3, 20, 0), (3, 21, 0), (3, 22, 0), (3, 23, 0), (3, 24, 0), (3, 25, 0), (3, 26, 0), (3, 27, 0), (3, 28, 0), (3, 29, 0), (3, 30, 0), (3, 31, 0), (4, 31, 0), (4, 30, 0), (4, 29, 0), (4, 28, 0), (4, 27, 0), (4, 26, 0), (4, 25, 0), (4, 24, 0), (5, 24, 0), (5, 25, 0), (5, 26, 0), (5, 27, 0), (5, 28, 0), (5, 29, 0), (5, 30, 0), (5, 31, 0), (2, 31, 0), (2, 30, 0), (2, 29, 0), (2, 28, 0), (2, 27, 0), (2, 26, 0), (2, 25, 0), (2, 24, 0), (2, 23, 0), (2, 22, 0), (2, 21, 0), (2, 20, 0), (2, 19, 0), (2, 18, 0), (2, 17, 0), (2, 16, 0), (2, 15, 0), (1, 15, 0), (1, 16, 0), (1, 17, 0), (1, 18, 0), (1, 19, 0), (1, 20, 0), (1, 21, 0), (1, 22, 0), (1, 23, 0), (1, 24, 0), (1, 25, 0), (1, 26, 0), (1, 27, 0), (1, 28, 0), (1, 29, 0), (1, 30, 0), (1, 31, 0), (0, 31, 0), (0, 30, 0), (0, 29, 0), (0, 28, 0), (0, 27, 0), (0, 26, 0), (0, 25, 0), (0, 24, 0), (0, 23, 0), (0, 22, 0), (0, 21, 0), (0, 20, 0), (0, 19, 0), (0, 18, 0), (0, 17, 0), (0, 16, 0), (0, 15, 0), (0, 14, 0), (0, 13, 0), (0, 12, 0), (0, 11, 0), (0, 10, 0), (0, 9, 0), (0, 8, 0), (0, 7, 0), (0, 6, 0), (0, 5, 0), (0, 4, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (0, 0, 0), (1, 0, 0), (1, 1, 0), (1, 2, 0), (1, 3, 0), (1, 4, 0), (1, 5, 0), (1, 6, 0), (1, 7, 0), (1, 8, 0), (1, 9, 0), (1, 10, 0), (1, 11, 0), (1, 12, 0), (1, 13, 0), (1, 14, 0), (2, 8, 0), (2, 7, 0), (2, 6, 0), (2, 5, 0), (2, 4, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0), (3, 2, 0), (3, 3, 0), (3, 4, 0), (3, 5, 0), (3, 6, 0), (3, 7, 0), (3, 8, 0), (4, 8, 0), (4, 7, 0), (4, 6, 0), (4, 5, 0), (4, 4, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0), (5, 2, 0), (5, 3, 0), (5, 4, 0), (5, 5, 0), (5, 6, 0), (5, 7, 0), (5, 8, 0), (6, 8, 0), (6, 9, 0), (6, 10, 0), (7, 10, 0), (7, 9, 0), (7, 8, 0), (7, 7, 0), (7, 6, 0), (7, 5, 0), (7, 4, 0), (6, 4, 0), (6, 3, 0), (6, 2, 0), (6, 1, 0), (6, 0, 0), (7, 0, 0), (7, 1, 0), (8, 1, 0), (8, 2, 0), (9, 2, 0), (8, 0, 0), (9, 0, 0), (10, 0, 0), (11, 0, 0), (11, 1, 0), (11, 2, 0), (12, 2, 0), (12, 3, 0), (12, 4, 0), (12, 5, 0), (12, 6, 0), (12, 7, 0), (12, 8, 0), (12, 9, 0), (12, 10, 0), (12, 11, 0), (12, 12, 0), (12, 13, 0), (12, 14, 0), (13, 14, 0), (13, 15, 0), (13, 13, 0), (13, 12, 0), (13, 11, 0), (13, 10, 0), (13, 9, 0), (13, 8, 0), (13, 7, 0), (13, 6, 0), (13, 5, 0), (13, 4, 0), (13, 3, 0), (13, 2, 0), (13, 1, 0), (13, 0, 0), (12, 0, 0), (12, 1, 0), (8, 5, 0), (8, 6, 0), (8, 7, 0), (8, 8, 0), (8, 9, 0), (8, 10, 0), (9, 10, 0), (9, 9, 0), (9, 8, 0), (9, 7, 0), (9, 6, 0), (9, 5, 0), (9, 4, 0), (10, 5, 0), (10, 6, 0), (10, 7, 0), (10, 8, 0), (10, 9, 0), (10, 10, 0), (6, 6, 0), (6, 7, 0), (3, 11, 0), (3, 10, 0), (4, 10, 0)]

Analysis: The path is not optimal because again the order in which the algorithm checks the actions prioritizes right and left and therefore just ends up going all the way right and all the way left until it finds the goal, being very un-optimal.

pic: images/result_dfs_map1.png

1.3
Path: None
Actions: None
Visited: None

Analysis: Because diagonal actions are prohibited there is no path that will lead to the goal.

pic: None

1.4
Because you are adding so many search nodes, you have a large stack of nodes to search and this may take a significant amount of memory.  You could cull the number of search nodes in the stack periodically to remove nodes that have been visited but this may take up time, so there is a trade-off.

1.5
 - map0.txt -
Path:
[(4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0), (0, 1, 0), (0, 2, 0), (0, 3, 0), (1, 3, 0), (1, 4, 0), (0, 4, 0)]
Actions:
['u', 'u', 'u', 'u', 'r', 'r', 'r', 'd', 'r', 'u']
Visited:
[(4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0), (0, 1, 0), (0, 2, 0), (0, 3, 0), (1, 3, 0), (1, 4, 0), (0, 4, 0)]
Analysis: The order prioritizes up and down actions and therefore finds a different solution, albeit and equally bad solution.

 - map1.txt -
 [(10, 1, 0), (11, 1, 0), (12, 1, 0), (13, 1, 0), (14, 1, 0), (15, 1, 0), (15, 0, 0), (14, 0, 0), (13, 0, 0), (12, 0, 0), (11, 0, 0), (10, 0, 0), (9, 0, 0), (8, 0, 0), (7, 0, 0), (6, 0, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0), (0, 1, 0), (1, 1, 0), (2, 1, 0), (3, 1, 0), (4, 1, 0), (5, 1, 0), (6, 1, 0), (7, 1, 0), (8, 1, 0), (8, 2, 0), (9, 2, 0), (10, 2, 0), (11, 2, 0), (12, 2, 0), (13, 2, 0), (14, 2, 0), (15, 2, 0), (15, 3, 0), (14, 3, 0), (13, 3, 0), (12, 3, 0), (11, 3, 0), (11, 4, 0), (12, 4, 0), (13, 4, 0), (14, 4, 0), (15, 4, 0), (15, 5, 0), (14, 5, 0), (13, 5, 0), (12, 5, 0), (11, 5, 0), (10, 5, 0), (9, 5, 0), (8, 5, 0), (7, 5, 0), (7, 4, 0), (6, 4, 0), (5, 4, 0), (4, 4, 0), (3, 4, 0), (2, 4, 0), (1, 4, 0), (0, 4, 0), (0, 5, 0), (1, 5, 0), (2, 5, 0), (3, 5, 0), (4, 5, 0), (5, 5, 0), (5, 6, 0), (4, 6, 0), (3, 6, 0), (2, 6, 0), (1, 6, 0), (0, 6, 0), (0, 7, 0), (1, 7, 0), (2, 7, 0), (3, 7, 0), (4, 7, 0), (5, 7, 0), (6, 7, 0), (7, 7, 0), (8, 7, 0), (9, 7, 0), (10, 7, 0), (11, 7, 0), (12, 7, 0), (13, 7, 0), (14, 7, 0), (15, 7, 0), (15, 8, 0), (14, 8, 0), (13, 8, 0), (12, 8, 0), (11, 8, 0), (10, 8, 0), (9, 8, 0), (8, 8, 0), (7, 8, 0), (6, 8, 0), (5, 8, 0), (4, 8, 0), (3, 8, 0), (2, 8, 0), (1, 8, 0), (0, 8, 0), (0, 9, 0), (1, 9, 0), (1, 10, 0), (0, 10, 0), (0, 11, 0), (1, 11, 0), (1, 12, 0), (0, 12, 0), (0, 13, 0), (1, 13, 0), (1, 14, 0), (0, 14, 0), (0, 15, 0), (1, 15, 0), (2, 15, 0), (3, 15, 0), (4, 15, 0), (5, 15, 0), (6, 15, 0), (7, 15, 0), (8, 15, 0), (9, 15, 0), (10, 15, 0), (11, 15, 0), (12, 15, 0), (13, 15, 0), (14, 15, 0), (15, 15, 0), (15, 14, 0), (14, 14, 0), (13, 14, 0), (12, 14, 0), (11, 14, 0), (11, 13, 0), (10, 13, 0), (9, 13, 0), (8, 13, 0), (7, 13, 0), (6, 13, 0), (5, 13, 0), (4, 13, 0), (3, 13, 0), (3, 12, 0), (3, 11, 0), (3, 10, 0), (4, 10, 0)]
 Actions:
 ['d', 'd', 'd', 'd', 'd', 'l', 'u', 'u', 'u', 'u', 'u', 'u', 'u', 'u', 'u', 'u', 'u', 'u', 'u', 'u', 'u', 'r', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'r', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'r', 'u', 'u', 'u', 'u', 'r', 'd', 'd', 'd', 'd', 'r', 'u', 'u', 'u', 'u', 'u', 'u', 'u', 'u', 'l', 'u', 'u', 'u', 'u', 'u', 'u', 'u', 'r', 'd', 'd', 'd', 'd', 'd', 'r', 'u', 'u', 'u', 'u', 'u', 'r', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'r', 'u', 'u', 'u', 'u', 'u', 'u', 'u', 'u', 'u', 'u', 'u', 'u', 'u', 'u', 'u', 'r', 'd', 'r', 'u', 'r', 'd', 'r', 'u', 'r', 'd', 'r', 'u', 'r', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'l', 'u', 'u', 'u', 'u', 'l', 'u', 'u', 'u', 'u', 'u', 'u', 'u', 'u', 'l', 'l', 'l', 'd']
 Visited:
 [(10, 1, 0), (11, 1, 0), (12, 1, 0), (13, 1, 0), (14, 1, 0), (15, 1, 0), (15, 0, 0), (14, 0, 0), (13, 0, 0), (12, 0, 0), (11, 0, 0), (10, 0, 0), (9, 0, 0), (8, 0, 0), (7, 0, 0), (6, 0, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0), (0, 1, 0), (1, 1, 0), (2, 1, 0), (3, 1, 0), (4, 1, 0), (5, 1, 0), (6, 1, 0), (7, 1, 0), (8, 1, 0), (8, 2, 0), (9, 2, 0), (10, 2, 0), (11, 2, 0), (12, 2, 0), (13, 2, 0), (14, 2, 0), (15, 2, 0), (15, 3, 0), (14, 3, 0), (13, 3, 0), (12, 3, 0), (11, 3, 0), (10, 3, 0), (11, 4, 0), (12, 4, 0), (13, 4, 0), (14, 4, 0), (15, 4, 0), (15, 5, 0), (14, 5, 0), (13, 5, 0), (12, 5, 0), (11, 5, 0), (10, 5, 0), (9, 5, 0), (8, 5, 0), (7, 5, 0), (7, 4, 0), (6, 4, 0), (5, 4, 0), (4, 4, 0), (3, 4, 0), (2, 4, 0), (1, 4, 0), (0, 4, 0), (0, 3, 0), (1, 3, 0), (2, 3, 0), (3, 3, 0), (4, 3, 0), (5, 3, 0), (6, 3, 0), (6, 2, 0), (5, 2, 0), (4, 2, 0), (3, 2, 0), (2, 2, 0), (1, 2, 0), (0, 2, 0), (0, 5, 0), (1, 5, 0), (2, 5, 0), (3, 5, 0), (4, 5, 0), (5, 5, 0), (5, 6, 0), (4, 6, 0), (3, 6, 0), (2, 6, 0), (1, 6, 0), (0, 6, 0), (0, 7, 0), (1, 7, 0), (2, 7, 0), (3, 7, 0), (4, 7, 0), (5, 7, 0), (6, 7, 0), (7, 7, 0), (8, 7, 0), (9, 7, 0), (10, 7, 0), (11, 7, 0), (12, 7, 0), (13, 7, 0), (14, 7, 0), (15, 7, 0), (15, 6, 0), (14, 6, 0), (13, 6, 0), (12, 6, 0), (11, 6, 0), (10, 6, 0), (9, 6, 0), (8, 6, 0), (7, 6, 0), (6, 6, 0), (15, 8, 0), (14, 8, 0), (13, 8, 0), (12, 8, 0), (11, 8, 0), (10, 8, 0), (9, 8, 0), (8, 8, 0), (7, 8, 0), (6, 8, 0), (5, 8, 0), (4, 8, 0), (3, 8, 0), (2, 8, 0), (1, 8, 0), (0, 8, 0), (0, 9, 0), (1, 9, 0), (1, 10, 0), (0, 10, 0), (0, 11, 0), (1, 11, 0), (1, 12, 0), (0, 12, 0), (0, 13, 0), (1, 13, 0), (1, 14, 0), (0, 14, 0), (0, 15, 0), (1, 15, 0), (2, 15, 0), (3, 15, 0), (4, 15, 0), (5, 15, 0), (6, 15, 0), (7, 15, 0), (8, 15, 0), (9, 15, 0), (10, 15, 0), (11, 15, 0), (12, 15, 0), (13, 15, 0), (14, 15, 0), (15, 15, 0), (15, 14, 0), (14, 14, 0), (13, 14, 0), (12, 14, 0), (11, 14, 0), (11, 13, 0), (10, 13, 0), (9, 13, 0), (8, 13, 0), (7, 13, 0), (6, 13, 0), (5, 13, 0), (4, 13, 0), (3, 13, 0), (3, 12, 0), (4, 12, 0), (5, 12, 0), (6, 12, 0), (7, 12, 0), (8, 12, 0), (9, 12, 0), (10, 12, 0), (11, 12, 0), (12, 12, 0), (13, 12, 0), (14, 12, 0), (15, 12, 0), (15, 11, 0), (14, 11, 0), (13, 11, 0), (12, 11, 0), (11, 11, 0), (11, 10, 0), (10, 10, 0), (9, 10, 0), (8, 10, 0), (7, 10, 0), (6, 10, 0), (6, 9, 0), (7, 9, 0), (8, 9, 0), (9, 9, 0), (10, 9, 0), (11, 9, 0), (12, 9, 0), (13, 9, 0), (14, 9, 0), (15, 9, 0), (15, 10, 0), (14, 10, 0), (13, 10, 0), (12, 10, 0), (15, 13, 0), (14, 13, 0), (13, 13, 0), (12, 13, 0), (3, 11, 0), (3, 10, 0), (4, 10, 0)]
Analysis: similarly we find a completely different solution however this solution happens to be slightly more optimal than the first just because search the up and down directions gets us closer to the goal faster.

1.6
 - map0.txt -
 Path:
 [(4, 0, 0), (4, 1, 0), (4, 2, 0), (4, 3, 0), (4, 4, 0), (3, 4, 0), (2, 4, 0), (1, 4, 0), (0, 4, 0)]
 Actions:
 ['r', 'r', 'r', 'r', 'u', 'u', 'u', 'u']
 Visited:
 [(4, 0, 0), (4, 1, 0), (4, 2, 0), (4, 3, 0), (4, 4, 0), (4, 4, 0), (4, 4, 0), (4, 4, 0), (4, 4, 0), (4, 3, 0), (3, 4, 0), (4, 3, 0), (4, 2, 0), (3, 3, 0), (3, 4, 0), (2, 4, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (3, 3, 0), (3, 4, 0), (2, 4, 0), (1, 4, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (4, 0, 0), (3, 1, 0), (3, 3, 0), (3, 4, 0), (2, 4, 0), (1, 4, 0), (1, 3, 0), (0, 4, 0)]
 Analysis: We did find the correct solution.  See below for more details.

 - map1.txt -
Path:
[(10, 1, 0), (10, 2, 0), (10, 3, 0), (11, 3, 0), (11, 4, 0), (11, 5, 0), (11, 6, 0), (11, 7, 0), (11, 8, 0), (11, 9, 0), (11, 10, 0), (11, 11, 0), (11, 12, 0), (10, 12, 0), (9, 12, 0), (8, 12, 0), (7, 12, 0), (6, 12, 0), (5, 12, 0), (4, 12, 0), (3, 12, 0), (3, 11, 0), (3, 10, 0), (4, 10, 0)]
Actions:
['r', 'r', 'd', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'u', 'u', 'u', 'u', 'u', 'u', 'u', 'u', 'l', 'l', 'd']
Visited: Really long, so I omitted it

Analysis: It found the optimal path.  It works because although it un-optimally looks at nodes, it is restricted to looking at only paths at the depth, m, so if there is an optimal solution of length m it will find it.  If there is not, then m increases and we go again.  Therefore, when m is equal to the length of the optimal path it will find that path and therefore the optimal solution.  Guaranteed optimal solution.

----------------------- 2 -----------------------------
2.1
Path:
[(4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0), (0, 1, 0), (0, 2, 0), (0, 3, 0), (0, 4, 0)]
Actions:
['u', 'u', 'u', 'u', 'r', 'r', 'r', 'r']
Visited:
[(4, 0, 0), (3, 0, 0), (4, 1, 0), (2, 0, 0), (3, 1, 0), (4, 2, 0), (1, 0, 0), (2, 1, 0), (4, 3, 0), (0, 0, 0), (3, 3, 0), (4, 4, 0), (0, 1, 0), (3, 4, 0), (0, 2, 0), (2, 4, 0), (0, 3, 0), (1, 4, 0), (1, 3, 0), (0, 4, 0)]
Analysis: It did find the optimal path because bfs always finds the optimal path when the transition costs are equal.  This is because bfs is designed to spread out in all directions until it finds the optimal solution.  The proof is similar to idfs above.

2.2
Path:
[(10, 1, 0), (11, 1, 0), (11, 2, 0), (11, 3, 0), (11, 4, 0), (11, 5, 0), (11, 6, 0), (11, 7, 0), (11, 8, 0), (11, 9, 0), (11, 10, 0), (11, 11, 0), (11, 12, 0), (10, 12, 0), (9, 12, 0), (8, 12, 0), (7, 12, 0), (6, 12, 0), (5, 12, 0), (4, 12, 0), (3, 12, 0), (3, 11, 0), (3, 10, 0), (4, 10, 0)]
Actions:
['d', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'u', 'u', 'u', 'u', 'u', 'u', 'u', 'u', 'l', 'l', 'd']
Visited:
[(10, 1, 0), (11, 1, 0), (10, 0, 0), (10, 2, 0), (12, 1, 0), (11, 0, 0), (11, 2, 0), (9, 0, 0), (9, 2, 0), (10, 3, 0), (13, 1, 0), (12, 0, 0), (12, 2, 0), (11, 3, 0), (8, 0, 0), (8, 2, 0), (14, 1, 0), (13, 0, 0), (13, 2, 0), (12, 3, 0), (11, 4, 0), (7, 0, 0), (8, 1, 0), (15, 1, 0), (14, 0, 0), (14, 2, 0), (13, 3, 0), (12, 4, 0), (11, 5, 0), (6, 0, 0), (7, 1, 0), (15, 0, 0), (15, 2, 0), (14, 3, 0), (13, 4, 0), (12, 5, 0), (10, 5, 0), (11, 6, 0), (5, 0, 0), (6, 1, 0), (15, 3, 0), (14, 4, 0), (13, 5, 0), (12, 6, 0), (9, 5, 0), (10, 6, 0), (11, 7, 0), (4, 0, 0), (5, 1, 0), (6, 2, 0), (15, 4, 0), (14, 5, 0), (13, 6, 0), (12, 7, 0), (8, 5, 0), (9, 4, 0), (9, 6, 0), (10, 7, 0), (11, 8, 0), (3, 0, 0), (4, 1, 0), (5, 2, 0), (6, 3, 0), (15, 5, 0), (14, 6, 0), (13, 7, 0), (12, 8, 0), (7, 5, 0), (8, 6, 0), (9, 7, 0), (10, 8, 0), (11, 9, 0), (2, 0, 0), (3, 1, 0), (4, 2, 0), (5, 3, 0), (6, 4, 0), (15, 6, 0), (14, 7, 0), (13, 8, 0), (12, 9, 0), (7, 4, 0), (7, 6, 0), (8, 7, 0), (9, 8, 0), (10, 9, 0), (11, 10, 0), (1, 0, 0), (2, 1, 0), (3, 2, 0), (4, 3, 0), (5, 4, 0), (15, 7, 0), (14, 8, 0), (13, 9, 0), (12, 10, 0), (6, 6, 0), (7, 7, 0), (8, 8, 0), (9, 9, 0), (10, 10, 0), (11, 11, 0), (0, 0, 0), (1, 1, 0), (2, 2, 0), (3, 3, 0), (4, 4, 0), (5, 5, 0), (15, 8, 0), (14, 9, 0), (13, 10, 0), (12, 11, 0), (5, 6, 0), (6, 7, 0), (7, 8, 0), (8, 9, 0), (9, 10, 0), (11, 12, 0), (0, 1, 0), (1, 2, 0), (2, 3, 0), (3, 4, 0), (4, 5, 0), (15, 9, 0), (14, 10, 0), (13, 11, 0), (12, 12, 0), (4, 6, 0), (5, 7, 0), (6, 8, 0), (7, 9, 0), (8, 10, 0), (10, 12, 0), (11, 13, 0), (0, 2, 0), (1, 3, 0), (2, 4, 0), (3, 5, 0), (15, 10, 0), (14, 11, 0), (13, 12, 0), (12, 13, 0), (3, 6, 0), (4, 7, 0), (5, 8, 0), (6, 9, 0), (7, 10, 0), (9, 12, 0), (10, 13, 0), (11, 14, 0), (0, 3, 0), (1, 4, 0), (2, 5, 0), (15, 11, 0), (14, 12, 0), (13, 13, 0), (12, 14, 0), (2, 6, 0), (3, 7, 0), (4, 8, 0), (6, 10, 0), (8, 12, 0), (9, 13, 0), (11, 15, 0), (0, 4, 0), (1, 5, 0), (15, 12, 0), (14, 13, 0), (13, 14, 0), (12, 15, 0), (1, 6, 0), (2, 7, 0), (3, 8, 0), (7, 12, 0), (8, 13, 0), (10, 15, 0), (0, 5, 0), (15, 13, 0), (14, 14, 0), (13, 15, 0), (12, 16, 0), (0, 6, 0), (1, 7, 0), (2, 8, 0), (6, 12, 0), (7, 13, 0), (9, 15, 0), (10, 16, 0), (15, 14, 0), (14, 15, 0), (12, 17, 0), (0, 7, 0), (1, 8, 0), (5, 12, 0), (6, 13, 0), (8, 15, 0), (9, 16, 0), (10, 17, 0), (15, 15, 0), (14, 16, 0), (11, 17, 0), (13, 17, 0), (12, 18, 0), (0, 8, 0), (1, 9, 0), (4, 12, 0), (5, 13, 0), (6, 14, 0), (7, 15, 0), (8, 16, 0), (9, 17, 0), (10, 18, 0), (15, 16, 0), (14, 17, 0), (11, 18, 0), (13, 18, 0), (12, 19, 0), (0, 9, 0), (1, 10, 0), (3, 12, 0), (4, 13, 0), (5, 14, 0), (6, 15, 0), (7, 16, 0), (8, 17, 0), (9, 18, 0), (10, 19, 0), (15, 17, 0), (14, 18, 0), (11, 19, 0), (13, 19, 0), (12, 20, 0), (0, 10, 0), (1, 11, 0), (3, 11, 0), (3, 13, 0), (4, 14, 0), (5, 15, 0), (6, 16, 0), (7, 17, 0), (8, 18, 0), (9, 19, 0), (10, 20, 0), (15, 18, 0), (14, 19, 0), (11, 20, 0), (13, 20, 0), (0, 11, 0), (1, 12, 0), (3, 10, 0), (3, 14, 0), (4, 15, 0), (5, 16, 0), (6, 17, 0), (7, 18, 0), (8, 19, 0), (9, 20, 0), (10, 21, 0), (15, 19, 0), (14, 20, 0), (11, 21, 0), (13, 21, 0), (0, 12, 0), (1, 13, 0), (4, 10, 0)]
Analysis: Again, the optimal path is found by this algorithm.

2.3
No solution is found because the path is blocked off.

2.4
DFS and BFS are equally easy to implement as you literally need to change one line of code to draw from the front of the list rather than the back (queue vs stack).  BFS is probably the cleanest because it only needs to run and look at a path once, unlike IDFS, which ends up looking at each path multiple times as you grow the maxdepth, m.  DFS will just keep going in one direction until it can't anymore, so obviously the paths evaluated are significantly different.  Thus DFS is not optimal, while both IDFS and BFS are optimal.  However, BFS is significantly faster for the same reasons it is "cleaner" (stated above).

----------------------- 3 -----------------------------
3.1
Path:
[(4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0), (0, 1, 0), (0, 2, 0), (0, 3, 0), (0, 4, 0)]
Actions:
['u', 'u', 'u', 'u', 'r', 'r', 'r', 'r']
Visited:
[(4, 0, 0), (3, 0, 0), (4, 1, 0), (2, 0, 0), (3, 1, 0), (4, 2, 0), (1, 0, 0), (2, 1, 0), (4, 3, 0), (3, 3, 0), (0, 0, 0), (4, 4, 0), (0, 1, 0), (3, 4, 0), (0, 2, 0), (2, 4, 0), (0, 3, 0), (1, 4, 0), (0, 4, 0)]
pic: images/result_ucs_map0.png
Analysis: The path found is the lowest cost and length.  The length is guaranteed because all actions have the same cost.  The cost is guaranteed because the algorithm will only look at lowest cost paths until it finds a solution.

3.2
Path:
[(10, 1, 0), (10, 2, 0), (10, 3, 0), (11, 3, 0), (11, 4, 0), (11, 5, 0), (11, 6, 0), (11, 7, 0), (11, 8, 0), (11, 9, 0), (11, 10, 0), (11, 11, 0), (11, 12, 0), (10, 12, 0), (9, 12, 0), (8, 12, 0), (7, 12, 0), (6, 12, 0), (5, 12, 0), (4, 12, 0), (3, 12, 0), (3, 11, 0), (3, 10, 0), (4, 10, 0)]
Actions:
['r', 'r', 'd', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'u', 'u', 'u', 'u', 'u', 'u', 'u', 'u', 'l', 'l', 'd']
Visited:
[(10, 1, 0), (10, 0, 0), (11, 1, 0), (10, 2, 0), (9, 0, 0), (12, 1, 0), (9, 2, 0), (10, 3, 0), (11, 2, 0), (11, 0, 0), (8, 2, 0), (12, 2, 0), (12, 0, 0), (11, 3, 0), (13, 1, 0), (8, 0, 0), (8, 1, 0), (7, 0, 0), (13, 0, 0), (13, 2, 0), (12, 3, 0), (14, 1, 0), (11, 4, 0), (15, 1, 0), (11, 5, 0), (14, 0, 0), (7, 1, 0), (6, 0, 0), (14, 2, 0), (13, 3, 0), (12, 4, 0), (15, 0, 0), (10, 5, 0), (15, 2, 0), (11, 6, 0), (13, 4, 0), (5, 0, 0), (6, 1, 0), (14, 3, 0), (12, 5, 0), (4, 0, 0), (13, 5, 0), (6, 2, 0), (5, 1, 0), (10, 6, 0), (15, 3, 0), (9, 5, 0), (11, 7, 0), (12, 6, 0), (14, 4, 0), (4, 1, 0), (13, 6, 0), (6, 3, 0), (10, 7, 0), (15, 4, 0), (11, 8, 0), (9, 6, 0), (9, 4, 0), (5, 2, 0), (12, 7, 0), (14, 5, 0), (8, 5, 0), (3, 0, 0), (4, 2, 0), (6, 4, 0), (13, 7, 0), (14, 6, 0), (2, 0, 0), (7, 5, 0), (5, 3, 0), (3, 1, 0), (9, 7, 0), (10, 8, 0), (11, 9, 0), (15, 5, 0), (8, 6, 0), (12, 8, 0), (5, 4, 0), (3, 2, 0), (4, 3, 0), (7, 4, 0), (13, 8, 0), (7, 6, 0), (2, 1, 0), (15, 6, 0), (10, 9, 0), (14, 7, 0), (9, 8, 0), (1, 0, 0), (11, 10, 0), (12, 9, 0), (8, 7, 0), (4, 4, 0), (14, 8, 0), (6, 6, 0), (5, 5, 0), (2, 2, 0), (7, 7, 0), (3, 3, 0), (13, 9, 0), (1, 1, 0), (15, 7, 0), (10, 10, 0), (9, 9, 0), (11, 11, 0), (0, 0, 0), (12, 10, 0), (8, 8, 0), (6, 7, 0), (11, 12, 0), (3, 4, 0), (14, 9, 0), (4, 5, 0), (2, 3, 0), (7, 8, 0), (13, 10, 0), (0, 1, 0), (1, 2, 0), (5, 6, 0), (12, 11, 0), (15, 8, 0), (8, 9, 0), (9, 10, 0), (6, 8, 0), (5, 7, 0), (3, 5, 0), (11, 13, 0), (10, 12, 0), (12, 12, 0), (4, 6, 0), (14, 10, 0), (15, 9, 0), (7, 9, 0), (13, 11, 0), (0, 2, 0), (8, 10, 0), (1, 3, 0), (2, 4, 0), (6, 9, 0), (3, 6, 0), (4, 7, 0), (1, 4, 0), (2, 5, 0), (11, 14, 0), (14, 11, 0), (13, 12, 0), (9, 12, 0), (15, 10, 0), (7, 10, 0), (12, 13, 0), (0, 3, 0), (5, 8, 0), (10, 13, 0), (6, 10, 0), (4, 8, 0), (13, 13, 0), (3, 7, 0), (1, 5, 0), (0, 4, 0), (11, 15, 0), (14, 12, 0), (8, 12, 0), (15, 11, 0), (9, 13, 0), (12, 14, 0), (2, 6, 0), (14, 13, 0), (13, 14, 0), (2, 7, 0), (1, 6, 0), (12, 15, 0), (8, 13, 0), (15, 12, 0), (10, 15, 0), (3, 8, 0), (0, 5, 0), (7, 12, 0), (14, 14, 0), (15, 13, 0), (9, 15, 0), (1, 7, 0), (13, 15, 0), (0, 6, 0), (2, 8, 0), (12, 16, 0), (7, 13, 0), (10, 16, 0), (6, 12, 0), (14, 15, 0), (8, 15, 0), (0, 7, 0), (15, 14, 0), (9, 16, 0), (1, 8, 0), (12, 17, 0), (6, 13, 0), (5, 12, 0), (10, 17, 0), (14, 16, 0), (8, 16, 0), (10, 18, 0), (7, 15, 0), (15, 15, 0), (9, 17, 0), (5, 13, 0), (13, 17, 0), (11, 17, 0), (1, 9, 0), (4, 12, 0), (0, 8, 0), (12, 18, 0), (6, 14, 0), (14, 17, 0), (3, 12, 0), (8, 17, 0), (0, 9, 0), (7, 16, 0), (11, 18, 0), (10, 19, 0), (15, 16, 0), (12, 19, 0), (6, 15, 0), (5, 14, 0), (9, 18, 0), (4, 13, 0), (13, 18, 0), (1, 10, 0), (14, 18, 0), (7, 17, 0), (15, 17, 0), (3, 11, 0), (3, 13, 0), (8, 18, 0), (0, 10, 0), (11, 19, 0), (10, 20, 0), (9, 19, 0), (1, 11, 0), (12, 20, 0), (5, 15, 0), (4, 14, 0), (13, 19, 0), (6, 16, 0), (15, 18, 0), (6, 17, 0), (3, 10, 0), (7, 18, 0), (14, 19, 0), (3, 14, 0), (8, 19, 0), (0, 11, 0), (10, 21, 0), (11, 20, 0), (9, 20, 0), (1, 12, 0), (4, 15, 0), (13, 20, 0), (5, 16, 0), (15, 19, 0), (8, 20, 0), (13, 21, 0), (6, 18, 0), (4, 10, 0)]
pic: images/result_ucs_map1.png

Analysis: We also find the optimal path here for the same reasons.  The optimal path is the lowest cost path and will also be the shortest due to equal cost transitions.

3.3
 - map0.txt -
Path:
[(4, 0, 0), (4, 1, 0), (4, 2, 0), (3, 3, 0), (2, 4, 0), (1, 4, 0), (0, 4, 0)]
Actions:
['r', 'r', 'ne', 'ne', 'u', 'u']
Visited:
[(4, 0, 0), (3, 0, 0), (4, 1, 0), (3, 1, 0), (4, 2, 0), (2, 0, 0), (2, 1, 0), (4, 3, 0), (1, 0, 0), (3, 3, 0), (0, 0, 0), (4, 4, 0), (0, 1, 0), (3, 4, 0), (2, 4, 0), (0, 2, 0), (1, 4, 0), (1, 3, 0), (0, 3, 0), (0, 4, 0)]
pic: images/result_ucs2_map0.png

 - map1.txt -
 Path:
 [(10, 1, 0), (10, 2, 0), (10, 3, 0), (11, 4, 0), (11, 5, 0), (11, 6, 0), (11, 7, 0), (11, 8, 0), (11, 9, 0), (11, 10, 0), (11, 11, 0), (10, 12, 0), (9, 12, 0), (8, 12, 0), (7, 12, 0), (6, 12, 0), (5, 12, 0), (4, 12, 0), (3, 11, 0), (4, 10, 0)]
 Actions:
 ['r', 'r', 'se', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'ne', 'u', 'u', 'u', 'u', 'u', 'u', 'nw', 'sw']
 Visited:
 [(10, 1, 0), (10, 0, 0), (11, 1, 0), (10, 2, 0), (11, 0, 0), (9, 0, 0), (9, 2, 0), (11, 2, 0), (10, 3, 0), (12, 1, 0), (11, 3, 0), (8, 2, 0), (12, 2, 0), (8, 0, 0), (12, 0, 0), (12, 3, 0), (8, 1, 0), (13, 1, 0), (9, 4, 0), (11, 4, 0), (13, 2, 0), (7, 0, 0), (13, 0, 0), (13, 3, 0), (7, 1, 0), (12, 4, 0), (14, 1, 0), (11, 5, 0), (14, 2, 0), (9, 5, 0), (14, 0, 0), (13, 4, 0), (6, 0, 0), (10, 5, 0), (15, 1, 0), (8, 5, 0), (12, 5, 0), (14, 3, 0), (6, 1, 0), (5, 0, 0), (15, 0, 0), (11, 6, 0), (14, 4, 0), (6, 2, 0), (15, 2, 0), (13, 5, 0), (9, 6, 0), (5, 1, 0), (15, 3, 0), (10, 6, 0), (12, 6, 0), (8, 6, 0), (14, 5, 0), (7, 5, 0), (15, 4, 0), (9, 7, 0), (13, 6, 0), (6, 3, 0), (5, 2, 0), (4, 0, 0), (11, 7, 0), (7, 6, 0), (7, 4, 0), (15, 5, 0), (10, 7, 0), (12, 7, 0), (4, 1, 0), (5, 3, 0), (14, 6, 0), (8, 7, 0), (13, 7, 0), (4, 2, 0), (6, 4, 0), (3, 0, 0), (7, 7, 0), (6, 6, 0), (9, 8, 0), (11, 8, 0), (15, 6, 0), (5, 4, 0), (10, 8, 0), (4, 3, 0), (8, 8, 0), (14, 7, 0), (12, 8, 0), (3, 1, 0), (6, 7, 0), (7, 8, 0), (2, 0, 0), (13, 8, 0), (11, 9, 0), (9, 9, 0), (5, 6, 0), (4, 4, 0), (15, 7, 0), (3, 2, 0), (14, 8, 0), (12, 9, 0), (8, 9, 0), (5, 5, 0), (3, 3, 0), (6, 8, 0), (10, 9, 0), (5, 7, 0), (2, 1, 0), (3, 4, 0), (2, 2, 0), (5, 8, 0), (4, 6, 0), (9, 10, 0), (11, 10, 0), (1, 0, 0), (7, 9, 0), (15, 8, 0), (13, 9, 0), (4, 5, 0), (2, 3, 0), (1, 1, 0), (6, 9, 0), (4, 7, 0), (14, 9, 0), (12, 10, 0), (8, 10, 0), (10, 10, 0), (3, 5, 0), (4, 8, 0), (1, 2, 0), (7, 10, 0), (3, 6, 0), (15, 9, 0), (0, 0, 0), (13, 10, 0), (2, 4, 0), (11, 11, 0), (3, 7, 0), (1, 3, 0), (2, 5, 0), (0, 1, 0), (12, 11, 0), (6, 10, 0), (14, 10, 0), (1, 4, 0), (2, 6, 0), (11, 12, 0), (0, 2, 0), (15, 10, 0), (13, 11, 0), (3, 8, 0), (10, 12, 0), (2, 7, 0), (0, 3, 0), (12, 12, 0), (1, 5, 0), (14, 11, 0), (13, 12, 0), (2, 8, 0), (15, 11, 0), (11, 13, 0), (0, 4, 0), (1, 6, 0), (12, 13, 0), (14, 12, 0), (0, 5, 0), (9, 12, 0), (10, 13, 0), (1, 7, 0), (11, 14, 0), (0, 6, 0), (15, 12, 0), (9, 13, 0), (1, 8, 0), (13, 13, 0), (0, 7, 0), (14, 13, 0), (1, 9, 0), (12, 14, 0), (8, 12, 0), (13, 14, 0), (15, 13, 0), (8, 13, 0), (0, 8, 0), (11, 15, 0), (14, 14, 0), (12, 15, 0), (7, 12, 0), (0, 9, 0), (10, 15, 0), (1, 10, 0), (15, 14, 0), (0, 10, 0), (13, 15, 0), (7, 13, 0), (6, 12, 0), (9, 15, 0), (10, 16, 0), (1, 11, 0), (12, 16, 0), (14, 15, 0), (0, 11, 0), (15, 15, 0), (9, 16, 0), (6, 13, 0), (6, 14, 0), (1, 12, 0), (14, 16, 0), (10, 17, 0), (12, 17, 0), (8, 15, 0), (5, 12, 0), (15, 16, 0), (5, 13, 0), (13, 17, 0), (11, 17, 0), (8, 16, 0), (0, 12, 0), (9, 17, 0), (5, 14, 0), (6, 15, 0), (7, 15, 0), (4, 12, 0), (8, 17, 0), (12, 18, 0), (1, 13, 0), (10, 18, 0), (14, 17, 0), (13, 18, 0), (4, 13, 0), (15, 17, 0), (7, 16, 0), (5, 15, 0), (9, 18, 0), (0, 13, 0), (11, 18, 0), (8, 18, 0), (7, 17, 0), (4, 14, 0), (14, 18, 0), (1, 14, 0), (6, 16, 0), (3, 12, 0), (12, 19, 0), (10, 19, 0), (15, 18, 0), (4, 15, 0), (7, 18, 0), (5, 16, 0), (3, 13, 0), (3, 11, 0), (9, 19, 0), (11, 19, 0), (13, 19, 0), (0, 14, 0), (10, 20, 0), (3, 14, 0), (14, 19, 0), (12, 20, 0), (8, 19, 0), (4, 16, 0), (6, 17, 0), (1, 15, 0), (9, 20, 0), (3, 15, 0), (3, 10, 0), (7, 19, 0), (15, 19, 0), (2, 15, 0), (11, 20, 0), (0, 15, 0), (6, 18, 0), (13, 20, 0), (5, 17, 0), (1, 16, 0), (3, 16, 0), (4, 17, 0), (6, 19, 0), (10, 21, 0), (14, 20, 0), (8, 20, 0), (4, 10, 0)]
 pic: images/result_ucs2_map1.png

 - map2.txt -
 Path:
 [(4, 0, 0), (4, 1, 0), (4, 2, 0), (3, 3, 0), (2, 4, 0), (1, 4, 0), (0, 4, 0)]
 Actions:
 ['r', 'r', 'ne', 'ne', 'u', 'u']
 Visited:
 [(4, 0, 0), (3, 0, 0), (4, 1, 0), (3, 1, 0), (4, 2, 0), (2, 0, 0), (2, 1, 0), (4, 3, 0), (3, 3, 0), (4, 4, 0), (2, 4, 0), (1, 4, 0), (1, 3, 0), (0, 4, 0)]
 pic: images/result_ucs2_map2.png

Analysis: The path is by definition the lowest cost path (proof by above logic).  The path is also the shortest, which you can see by looking at the path.  The path takes a diagonal action whenever it runs into a position where it would need to make two moves to get to the diagonal position.  This is cheaper as it costs 1.5 instead of 1+1=2.  Therefore, we ensure that the lowest cost path will also be the shortest.  This is true for all 3 maps (map2 is unsolvable without diagonal moves anyway).

----------------------- 4 -----------------------------
4.1
 - map0.txt -
 Path:
 [(4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0), (0, 1, 0), (0, 2, 0), (0, 3, 0), (0, 4, 0)]
 Actions:
 ['u', 'u', 'u', 'u', 'r', 'r', 'r', 'r']
 Visited:
 [(4, 0, 0), (3, 0, 0), (4, 1, 0), (3, 1, 0), (2, 0, 0), (4, 2, 0), (2, 1, 0), (1, 0, 0), (4, 3, 0), (3, 3, 0), (0, 0, 0), (4, 4, 0), (0, 1, 0), (3, 4, 0), (0, 2, 0), (2, 4, 0), (0, 3, 0), (1, 4, 0), (0, 4, 0)]
 pic: images/result_astar_map0.png

 - map1.txt -
 Path:
 [(10, 1, 0), (10, 2, 0), (10, 3, 0), (11, 3, 0), (11, 4, 0), (11, 5, 0), (11, 6, 0), (11, 7, 0), (11, 8, 0), (11, 9, 0), (11, 10, 0), (11, 11, 0), (11, 12, 0), (10, 12, 0), (9, 12, 0), (8, 12, 0), (7, 12, 0), (6, 12, 0), (5, 12, 0), (4, 12, 0), (3, 12, 0), (3, 11, 0), (3, 10, 0), (4, 10, 0)]
 Actions:
 ['r', 'r', 'd', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'u', 'u', 'u', 'u', 'u', 'u', 'u', 'u', 'l', 'l', 'd']
 Visited:
 [(10, 1, 0), (10, 2, 0), (10, 3, 0), (9, 2, 0), (8, 2, 0), (11, 1, 0), (11, 2, 0), (10, 0, 0), (11, 3, 0), (9, 0, 0), (11, 4, 0), (11, 5, 0), (8, 0, 0), (10, 5, 0), (8, 1, 0), (12, 1, 0), (11, 6, 0), (9, 5, 0), (11, 0, 0), (10, 6, 0), (12, 2, 0), (9, 6, 0), (8, 5, 0), (7, 0, 0), (7, 1, 0), (11, 7, 0), (12, 3, 0), (8, 6, 0), (10, 7, 0), (9, 7, 0), (7, 5, 0), (12, 4, 0), (7, 6, 0), (8, 7, 0), (6, 0, 0), (6, 1, 0), (7, 7, 0), (6, 2, 0), (11, 8, 0), (6, 3, 0), (10, 8, 0), (6, 4, 0), (9, 8, 0), (12, 5, 0), (8, 8, 0), (6, 6, 0), (7, 8, 0), (6, 7, 0), (13, 1, 0), (12, 0, 0), (9, 4, 0), (6, 8, 0), (12, 6, 0), (13, 2, 0), (5, 0, 0), (5, 1, 0), (5, 2, 0), (5, 3, 0), (11, 9, 0), (5, 4, 0), (10, 9, 0), (9, 9, 0), (5, 5, 0), (8, 9, 0), (5, 6, 0), (7, 9, 0), (5, 7, 0), (6, 9, 0), (5, 8, 0), (13, 3, 0), (12, 7, 0), (7, 4, 0), (13, 4, 0), (4, 0, 0), (4, 1, 0), (4, 2, 0), (4, 3, 0), (11, 10, 0), (4, 4, 0), (10, 10, 0), (4, 5, 0), (9, 10, 0), (8, 10, 0), (4, 6, 0), (7, 10, 0), (4, 7, 0), (4, 8, 0), (6, 10, 0), (12, 8, 0), (13, 5, 0), (14, 1, 0), (13, 0, 0), (14, 2, 0), (13, 6, 0), (3, 0, 0), (3, 1, 0), (12, 9, 0), (3, 2, 0), (11, 11, 0), (3, 3, 0), (3, 4, 0), (3, 5, 0), (3, 6, 0), (3, 7, 0), (14, 3, 0), (3, 8, 0), (13, 7, 0), (14, 4, 0), (12, 10, 0), (14, 0, 0), (14, 5, 0), (2, 0, 0), (15, 1, 0), (2, 1, 0), (13, 8, 0), (2, 2, 0), (2, 3, 0), (11, 12, 0), (2, 4, 0), (10, 12, 0), (2, 5, 0), (9, 12, 0), (2, 6, 0), (8, 12, 0), (15, 2, 0), (7, 12, 0), (2, 7, 0), (14, 6, 0), (6, 12, 0), (2, 8, 0), (15, 3, 0), (13, 9, 0), (12, 11, 0), (5, 12, 0), (14, 7, 0), (1, 0, 0), (1, 1, 0), (15, 4, 0), (1, 2, 0), (11, 13, 0), (1, 3, 0), (10, 13, 0), (1, 4, 0), (1, 5, 0), (9, 13, 0), (15, 0, 0), (13, 10, 0), (8, 13, 0), (1, 6, 0), (4, 12, 0), (15, 5, 0), (14, 8, 0), (1, 7, 0), (7, 13, 0), (12, 12, 0), (6, 13, 0), (1, 8, 0), (15, 6, 0), (0, 0, 0), (0, 1, 0), (0, 2, 0), (14, 9, 0), (13, 11, 0), (11, 14, 0), (0, 3, 0), (5, 13, 0), (1, 9, 0), (0, 4, 0), (3, 12, 0), (15, 7, 0), (0, 5, 0), (3, 11, 0), (12, 13, 0), (0, 6, 0), (14, 10, 0), (0, 7, 0), (4, 13, 0), (1, 10, 0), (3, 10, 0), (4, 10, 0)]
 pic: images/result_astar_map1.png

 - map2.txt -
None

Analysis: The path in map0 is different because the euclidean heuristic pushes it in a different direction.  However, the result is equally optimal.  The path for map1 is exactly the same.  Similarly, map2 is impossible by both algorithms without diagonal actions.
The major difference between the two is in the number of explored states, which is considerably less for astar than for ucs (although it's not noticable in map0).

4.2
 - map0.txt -
 Path:
 [(4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0), (0, 1, 0), (0, 2, 0), (0, 3, 0), (0, 4, 0)]
 Actions:
 ['u', 'u', 'u', 'u', 'r', 'r', 'r', 'r']
 Visited:
 [(4, 0, 0), (3, 0, 0), (4, 1, 0), (2, 0, 0), (4, 2, 0), (3, 1, 0), (1, 0, 0), (2, 1, 0), (4, 3, 0), (0, 0, 0), (4, 4, 0), (3, 3, 0), (0, 1, 0), (3, 4, 0), (0, 2, 0), (2, 4, 0), (0, 3, 0), (1, 4, 0), (0, 4, 0)]
 pic: images/result_astar2_map0.png

 - map1.txt -
 Path:
 [(10, 1, 0), (10, 2, 0), (10, 3, 0), (11, 3, 0), (11, 4, 0), (11, 5, 0), (11, 6, 0), (11, 7, 0), (11, 8, 0), (11, 9, 0), (11, 10, 0), (11, 11, 0), (11, 12, 0), (10, 12, 0), (9, 12, 0), (8, 12, 0), (7, 12, 0), (6, 12, 0), (5, 12, 0), (4, 12, 0), (3, 12, 0), (3, 11, 0), (3, 10, 0), (4, 10, 0)]
 Actions:
 ['r', 'r', 'd', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'u', 'u', 'u', 'u', 'u', 'u', 'u', 'u', 'l', 'l', 'd']
 Visited:
 [(10, 1, 0), (10, 2, 0), (9, 2, 0), (10, 3, 0), (8, 2, 0), (10, 0, 0), (11, 1, 0), (9, 0, 0), (11, 2, 0), (11, 3, 0), (8, 0, 0), (11, 4, 0), (7, 0, 0), (8, 1, 0), (11, 5, 0), (7, 1, 0), (6, 0, 0), (11, 6, 0), (6, 1, 0), (5, 0, 0), (10, 5, 0), (11, 7, 0), (5, 1, 0), (6, 2, 0), (9, 5, 0), (4, 0, 0), (10, 6, 0), (11, 8, 0), (4, 1, 0), (10, 7, 0), (5, 2, 0), (6, 3, 0), (9, 6, 0), (8, 5, 0), (4, 2, 0), (9, 7, 0), (6, 4, 0), (8, 6, 0), (7, 5, 0), (5, 3, 0), (11, 9, 0), (10, 8, 0), (9, 8, 0), (5, 4, 0), (7, 6, 0), (11, 10, 0), (10, 9, 0), (4, 3, 0), (8, 7, 0), (9, 9, 0), (7, 7, 0), (10, 10, 0), (4, 4, 0), (5, 5, 0), (6, 6, 0), (8, 8, 0), (8, 9, 0), (9, 10, 0), (6, 7, 0), (4, 5, 0), (5, 6, 0), (7, 8, 0), (7, 9, 0), (6, 8, 0), (4, 6, 0), (8, 10, 0), (5, 7, 0), (7, 10, 0), (5, 8, 0), (4, 7, 0), (6, 9, 0), (6, 10, 0), (4, 8, 0), (12, 1, 0), (11, 0, 0), (12, 2, 0), (12, 3, 0), (12, 4, 0), (12, 5, 0), (12, 6, 0), (9, 4, 0), (12, 7, 0), (3, 0, 0), (12, 8, 0), (3, 1, 0), (12, 9, 0), (7, 4, 0), (3, 2, 0), (12, 10, 0), (3, 3, 0), (11, 11, 0), (3, 4, 0), (3, 5, 0), (3, 6, 0), (3, 7, 0), (3, 8, 0), (12, 0, 0), (13, 1, 0), (13, 2, 0), (13, 3, 0), (13, 4, 0), (13, 5, 0), (13, 6, 0), (13, 7, 0), (2, 0, 0), (13, 8, 0), (2, 1, 0), (2, 2, 0), (13, 9, 0), (2, 3, 0), (12, 11, 0), (11, 12, 0), (13, 10, 0), (2, 4, 0), (10, 12, 0), (2, 5, 0), (9, 12, 0), (2, 6, 0), (8, 12, 0), (2, 7, 0), (7, 12, 0), (2, 8, 0), (6, 12, 0), (5, 12, 0), (4, 12, 0), (13, 0, 0), (14, 1, 0), (14, 2, 0), (14, 3, 0), (14, 4, 0), (14, 5, 0), (14, 6, 0), (14, 7, 0), (1, 0, 0), (14, 8, 0), (1, 1, 0), (14, 9, 0), (1, 2, 0), (11, 13, 0), (13, 11, 0), (12, 12, 0), (1, 3, 0), (14, 10, 0), (10, 13, 0), (1, 4, 0), (1, 5, 0), (9, 13, 0), (1, 6, 0), (8, 13, 0), (1, 7, 0), (7, 13, 0), (1, 8, 0), (6, 13, 0), (5, 13, 0), (1, 9, 0), (1, 10, 0), (4, 13, 0), (3, 12, 0), (3, 11, 0), (3, 10, 0), (4, 10, 0)]
 pic: images/result_astar2_map1.png

 - map2.txt -
None

Analysis: A* performs similarly with the Manhattan heuristic, with the number of visited states lower than UCS and, in map1, even fewer visited states than A* with a euclidean heuristic.  This is probably because euclidean distances are more exact and therefore add in more ambiguity on these discrete maps than the more discrete heuristic of Manhattan.  Either way, the optimal shortest and lowest cost paths are found by both (except in map2 which is, again, impossible without diagonal movements).

4.3

Results with Euclidean Heuristic
 - map0.txt -
Path:
[(4, 0, 0), (4, 1, 0), (4, 2, 0), (3, 3, 0), (2, 4, 0), (1, 4, 0), (0, 4, 0)]
Actions:
['r', 'r', 'ne', 'ne', 'u', 'u']
Visited:
[(4, 0, 0), (3, 1, 0), (4, 1, 0), (3, 0, 0), (2, 1, 0), (2, 0, 0), (4, 2, 0), (3, 3, 0), (2, 4, 0), (1, 4, 0), (0, 4, 0)]
pic: images/result_astar3_map0.png

 - map1.txt -
Path:
[(10, 1, 0), (10, 2, 0), (10, 3, 0), (11, 4, 0), (11, 5, 0), (11, 6, 0), (11, 7, 0), (11, 8, 0), (11, 9, 0), (11, 10, 0), (11, 11, 0), (10, 12, 0), (9, 12, 0), (8, 12, 0), (7, 12, 0), (6, 12, 0), (5, 12, 0), (4, 12, 0), (3, 11, 0), (4, 10, 0)]
Actions:
['r', 'r', 'se', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'ne', 'u', 'u', 'u', 'u', 'u', 'u', 'nw', 'sw']
Visited:
[(10, 1, 0), (9, 2, 0), (10, 2, 0), (10, 3, 0), (9, 4, 0), (8, 5, 0), (8, 2, 0), (7, 6, 0), (9, 5, 0), (6, 7, 0), (8, 6, 0), (5, 8, 0), (7, 7, 0), (6, 8, 0), (7, 5, 0), (9, 6, 0), (6, 6, 0), (8, 7, 0), (7, 8, 0), (11, 2, 0), (5, 7, 0), (6, 9, 0), (9, 7, 0), (11, 3, 0), (11, 1, 0), (8, 8, 0), (4, 8, 0), (5, 6, 0), (10, 0, 0), (7, 9, 0), (9, 0, 0), (11, 4, 0), (10, 5, 0), (8, 1, 0), (9, 8, 0), (4, 7, 0), (6, 10, 0), (11, 5, 0), (8, 9, 0), (7, 4, 0), (10, 6, 0), (8, 0, 0), (7, 1, 0), (4, 6, 0), (7, 10, 0), (11, 6, 0), (9, 9, 0), (12, 3, 0), (11, 0, 0), (10, 7, 0), (3, 8, 0), (6, 2, 0), (6, 3, 0), (12, 2, 0), (6, 4, 0), (7, 0, 0), (12, 4, 0), (8, 10, 0), (12, 1, 0), (5, 3, 0), (5, 4, 0), (5, 5, 0), (11, 7, 0), (3, 7, 0), (6, 1, 0), (10, 8, 0), (12, 5, 0), (4, 4, 0), (4, 5, 0), (9, 10, 0), (5, 2, 0), (3, 6, 0), (6, 0, 0), (11, 8, 0), (12, 6, 0), (4, 3, 0), (5, 1, 0), (10, 9, 0), (3, 5, 0), (12, 0, 0), (13, 4, 0), (2, 8, 0), (13, 3, 0), (4, 2, 0), (13, 2, 0), (12, 7, 0), (5, 0, 0), (11, 9, 0), (3, 4, 0), (2, 7, 0), (13, 1, 0), (13, 5, 0), (2, 6, 0), (4, 1, 0), (10, 10, 0), (3, 3, 0), (12, 8, 0), (13, 6, 0), (2, 5, 0), (4, 0, 0), (11, 10, 0), (3, 2, 0), (2, 4, 0), (13, 0, 0), (13, 7, 0), (3, 1, 0), (12, 9, 0), (1, 8, 0), (14, 4, 0), (1, 9, 0), (14, 5, 0), (14, 3, 0), (1, 7, 0), (2, 3, 0), (14, 2, 0), (14, 1, 0), (1, 6, 0), (3, 0, 0), (11, 11, 0), (13, 8, 0), (2, 2, 0), (14, 6, 0), (1, 5, 0), (12, 10, 0), (1, 10, 0), (1, 4, 0), (2, 1, 0), (10, 12, 0), (9, 12, 0), (14, 7, 0), (8, 12, 0), (13, 9, 0), (7, 12, 0), (1, 3, 0), (14, 0, 0), (2, 0, 0), (11, 12, 0), (6, 12, 0), (0, 8, 0), (0, 7, 0), (15, 4, 0), (15, 3, 0), (1, 2, 0), (12, 11, 0), (15, 5, 0), (15, 2, 0), (0, 9, 0), (0, 6, 0), (1, 11, 0), (14, 8, 0), (15, 6, 0), (15, 1, 0), (5, 12, 0), (9, 13, 0), (0, 5, 0), (1, 1, 0), (13, 10, 0), (8, 13, 0), (0, 10, 0), (10, 13, 0), (0, 4, 0), (7, 13, 0), (15, 7, 0), (1, 0, 0), (4, 12, 0), (14, 9, 0), (0, 3, 0), (6, 13, 0), (11, 13, 0), (12, 12, 0), (15, 0, 0), (0, 2, 0), (13, 11, 0), (1, 12, 0), (0, 11, 0), (5, 13, 0), (15, 8, 0), (0, 1, 0), (3, 11, 0), (14, 10, 0), (4, 10, 0)]
pic: images/result_astar3_map1.png

 - map2.txt -
Path:
[(10, 1, 0), (10, 2, 0), (10, 3, 0), (11, 3, 0), (11, 4, 0), (11, 5, 0), (11, 6, 0), (11, 7, 0), (11, 8, 0), (11, 9, 0), (11, 10, 0), (11, 11, 0), (11, 12, 0), (10, 12, 0), (9, 12, 0), (8, 12, 0), (7, 12, 0), (6, 12, 0), (5, 12, 0), (4, 12, 0), (3, 12, 0), (3, 11, 0), (3, 10, 0), (4, 10, 0)]
Actions:
['r', 'r', 'd', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'u', 'u', 'u', 'u', 'u', 'u', 'u', 'u', 'l', 'l', 'd']
Visited:
[(10, 1, 0), (10, 2, 0), (9, 2, 0), (10, 3, 0), (8, 2, 0), (10, 0, 0), (11, 1, 0), (9, 0, 0), (11, 2, 0), (11, 3, 0), (8, 0, 0), (11, 4, 0), (7, 0, 0), (8, 1, 0), (11, 5, 0), (7, 1, 0), (6, 0, 0), (11, 6, 0), (6, 1, 0), (5, 0, 0), (10, 5, 0), (11, 7, 0), (5, 1, 0), (6, 2, 0), (9, 5, 0), (4, 0, 0), (10, 6, 0), (11, 8, 0), (4, 1, 0), (10, 7, 0), (5, 2, 0), (6, 3, 0), (9, 6, 0), (8, 5, 0), (4, 2, 0), (9, 7, 0), (6, 4, 0), (8, 6, 0), (7, 5, 0), (5, 3, 0), (11, 9, 0), (10, 8, 0), (9, 8, 0), (5, 4, 0), (7, 6, 0), (11, 10, 0), (10, 9, 0), (4, 3, 0), (8, 7, 0), (9, 9, 0), (7, 7, 0), (10, 10, 0), (4, 4, 0), (5, 5, 0), (6, 6, 0), (8, 8, 0), (8, 9, 0), (9, 10, 0), (6, 7, 0), (4, 5, 0), (5, 6, 0), (7, 8, 0), (7, 9, 0), (6, 8, 0), (4, 6, 0), (8, 10, 0), (5, 7, 0), (7, 10, 0), (5, 8, 0), (4, 7, 0), (6, 9, 0), (6, 10, 0), (4, 8, 0), (12, 1, 0), (11, 0, 0), (12, 2, 0), (12, 3, 0), (12, 4, 0), (12, 5, 0), (12, 6, 0), (9, 4, 0), (12, 7, 0), (3, 0, 0), (12, 8, 0), (3, 1, 0), (12, 9, 0), (7, 4, 0), (3, 2, 0), (12, 10, 0), (3, 3, 0), (11, 11, 0), (3, 4, 0), (3, 5, 0), (3, 6, 0), (3, 7, 0), (3, 8, 0), (12, 0, 0), (13, 1, 0), (13, 2, 0), (13, 3, 0), (13, 4, 0), (13, 5, 0), (13, 6, 0), (13, 7, 0), (2, 0, 0), (13, 8, 0), (2, 1, 0), (2, 2, 0), (13, 9, 0), (2, 3, 0), (12, 11, 0), (11, 12, 0), (13, 10, 0), (2, 4, 0), (10, 12, 0), (2, 5, 0), (9, 12, 0), (2, 6, 0), (8, 12, 0), (2, 7, 0), (7, 12, 0), (2, 8, 0), (6, 12, 0), (5, 12, 0), (4, 12, 0), (13, 0, 0), (14, 1, 0), (14, 2, 0), (14, 3, 0), (14, 4, 0), (14, 5, 0), (14, 6, 0), (14, 7, 0), (1, 0, 0), (14, 8, 0), (1, 1, 0), (14, 9, 0), (1, 2, 0), (11, 13, 0), (13, 11, 0), (12, 12, 0), (1, 3, 0), (14, 10, 0), (10, 13, 0), (1, 4, 0), (1, 5, 0), (9, 13, 0), (1, 6, 0), (8, 13, 0), (1, 7, 0), (7, 13, 0), (1, 8, 0), (6, 13, 0), (5, 13, 0), (1, 9, 0), (1, 10, 0), (4, 13, 0), (3, 12, 0), (3, 11, 0), (3, 10, 0), (4, 10, 0)]
pic: images/result_astar2_map1.png

Results with Manhattan Heuristic
 - map0.txt -
Path:
[(4, 0, 0), (4, 1, 0), (4, 2, 0), (3, 3, 0), (2, 4, 0), (1, 4, 0), (0, 4, 0)]
Actions:
['r', 'r', 'ne', 'ne', 'u', 'u']
Visited:
[(4, 0, 0), (3, 1, 0), (2, 1, 0), (4, 1, 0), (3, 0, 0), (4, 2, 0), (3, 3, 0), (2, 4, 0), (1, 4, 0), (0, 4, 0)]
pic: images/result_astar4_map0.png

 - map1.txt -
Path:
[(10, 1, 0), (10, 2, 0), (10, 3, 0), (11, 4, 0), (11, 5, 0), (11, 6, 0), (11, 7, 0), (11, 8, 0), (11, 9, 0), (11, 10, 0), (11, 11, 0), (10, 12, 0), (9, 12, 0), (8, 12, 0), (7, 12, 0), (6, 12, 0), (5, 12, 0), (4, 12, 0), (3, 11, 0), (4, 10, 0)]
Actions:
['r', 'r', 'se', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'ne', 'u', 'u', 'u', 'u', 'u', 'u', 'nw', 'sw']
Visited:
[(10, 1, 0), (9, 2, 0), (8, 2, 0), (10, 2, 0), (10, 3, 0), (9, 4, 0), (8, 5, 0), (7, 6, 0), (6, 7, 0), (5, 8, 0), (4, 8, 0), (5, 7, 0), (6, 8, 0), (4, 7, 0), (6, 9, 0), (6, 10, 0), (6, 6, 0), (7, 7, 0), (7, 8, 0), (5, 6, 0), (7, 9, 0), (4, 6, 0), (7, 10, 0), (7, 5, 0), (8, 6, 0), (8, 7, 0), (8, 8, 0), (8, 9, 0), (8, 10, 0), (9, 5, 0), (9, 6, 0), (9, 7, 0), (9, 8, 0), (9, 9, 0), (9, 10, 0), (3, 8, 0), (5, 5, 0), (4, 5, 0), (3, 7, 0), (7, 4, 0), (6, 4, 0), (5, 4, 0), (4, 4, 0), (3, 6, 0), (8, 1, 0), (7, 1, 0), (6, 2, 0), (5, 3, 0), (4, 3, 0), (6, 3, 0), (5, 2, 0), (4, 2, 0), (6, 1, 0), (10, 5, 0), (10, 6, 0), (5, 1, 0), (10, 7, 0), (4, 1, 0), (10, 8, 0), (10, 9, 0), (10, 10, 0), (9, 0, 0), (11, 2, 0), (8, 0, 0), (11, 3, 0), (7, 0, 0), (11, 4, 0), (11, 5, 0), (6, 0, 0), (11, 6, 0), (5, 0, 0), (11, 7, 0), (4, 0, 0), (11, 8, 0), (11, 9, 0), (11, 10, 0), (3, 4, 0), (3, 5, 0), (2, 8, 0), (11, 1, 0), (10, 0, 0), (3, 3, 0), (2, 7, 0), (3, 2, 0), (2, 6, 0), (12, 3, 0), (12, 4, 0), (12, 5, 0), (12, 6, 0), (12, 7, 0), (3, 1, 0), (12, 8, 0), (12, 9, 0), (12, 10, 0), (2, 5, 0), (1, 9, 0), (1, 10, 0), (11, 0, 0), (12, 2, 0), (3, 0, 0), (2, 4, 0), (11, 11, 0), (1, 8, 0), (12, 1, 0), (2, 3, 0), (1, 7, 0), (13, 4, 0), (13, 5, 0), (13, 6, 0), (13, 7, 0), (13, 8, 0), (2, 2, 0), (13, 9, 0), (13, 10, 0), (1, 6, 0), (0, 10, 0), (13, 3, 0), (2, 1, 0), (12, 11, 0), (1, 5, 0), (10, 12, 0), (9, 12, 0), (8, 12, 0), (0, 9, 0), (7, 12, 0), (6, 12, 0), (1, 11, 0), (5, 12, 0), (4, 12, 0), (12, 0, 0), (13, 2, 0), (2, 0, 0), (11, 12, 0), (1, 4, 0), (0, 8, 0), (13, 1, 0), (14, 5, 0), (14, 6, 0), (14, 7, 0), (14, 8, 0), (14, 9, 0), (14, 10, 0), (1, 3, 0), (0, 7, 0), (14, 4, 0), (1, 2, 0), (13, 11, 0), (0, 6, 0), (9, 13, 0), (8, 13, 0), (7, 13, 0), (0, 11, 0), (6, 13, 0), (5, 13, 0), (4, 13, 0), (3, 11, 0), (4, 10, 0)]
pic: images/result_astar4_map1.png

 - map2.txt -
Path:
[(4, 0, 0), (4, 1, 0), (4, 2, 0), (3, 3, 0), (2, 4, 0), (1, 4, 0), (0, 4, 0)]
Actions:
['r', 'r', 'ne', 'ne', 'u', 'u']
Visited:
[(4, 0, 0), (3, 1, 0), (2, 1, 0), (4, 1, 0), (3, 0, 0), (2, 0, 0), (4, 2, 0), (3, 3, 0), (2, 4, 0), (1, 4, 0), (0, 4, 0)]
pic: images/result_astar4_map2.png


Analysis: The results are still optimal, with the path taking shortcuts whenever it can to avoid making two moves by taking a diagonal.  Similar to the case where diagonal actions are not allowed, the Manhattan heuristic reduces the number of visited states.
However, with the addition of diagonal actions, the Manhattan heuristic is no longer admissible.  Take the case when we are in state (0,0) and we want to move to (1,1). The Manhattan heuristic would tell us that we are a distance of 2 away from our goal state.  However, with a diagonal action it would only cost us 1.5 to get to our goal.  Therefore, the Manhattan heuristic overestimates the distance to the goal and is no longer admissible.  Conversely, the Euclidean heuristic is still admissible because in this same scenario it would exactly estimate the distance to the goal.  In the absence of obstacles, which exclusively make the optimal path longer, the Euclidean heuristic is always the optimal distance to the goal in this space.  With obstacles the Euclidean heuristic underestimates the cost to the goal, and is therefore valid.
While the admissibility of the heuristic doesn't actually effect the algorithms ability to find the correct solution in these cases, there are cases in which it could inhibit the algorithms ability to find the optimal solution, or at least increase the search space.
As stated above, the diagonal actions allow us to take shortcuts when we would have to move twice to move around a corner.  This is really the only effect, except in the case of map2 which relies on the diagonal actions in order to find any solution.

4.4
They find the same solutions but the added heuristics in A* allow us to cut the search space down considerably.

----------------------- 5 -----------------------------
5.1

5.2

5.3

5.4

5.5

----------------------- 6 -----------------------------
6.1
The hardest part of the assignment was understanding how to use the code given to us.  I had to read through all of the graph and PriorityQ code in order to understand what it was doing.  I understand using the states instead of the nodes themselves saves a little bit of space but I feel like it would be better to use the nodes and just add an equality function to the SearchNode class.

6.2
The easiest part of the assignment was writing the heuristics.

6.3
I already understood most of these algorithms, so they didn't change my understanding that much.  However, if I hadn't taken the AI class last semester, then I think all of the problems would have been good learning opportunities.

6.4
I felt like all of the problems were good and on topic.  See 6.3 for more.

6.5
I think it was fine, I would just like a little bit better documentation on how to use the classes provided.  See 6.1.  It wasn't actually that bad though.
